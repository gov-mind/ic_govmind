use crate::{Hex, Hex20, Hex256, Hex32, HexByte, Nat256};
use candid::CandidType;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, CandidType)]
pub struct FeeHistory {
    /// Lowest number block of the returned range.
    #[serde(rename = "oldestBlock")]
    pub oldest_block: Nat256,

    /// An array of block base fees per gas.
    /// This includes the next block after the newest of the returned range,
    /// because this value can be derived from the newest block.
    /// Zeroes are returned for pre-EIP-1559 blocks.
    #[serde(rename = "baseFeePerGas")]
    pub base_fee_per_gas: Vec<Nat256>,

    /// An array of block gas used ratios (gasUsed / gasLimit).
    #[serde(rename = "gasUsedRatio")]
    pub gas_used_ratio: Vec<f64>,

    /// A two-dimensional array of effective priority fees per gas at the requested block percentiles.
    #[serde(rename = "reward")]
    pub reward: Vec<Vec<Nat256>>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq, CandidType)]
pub struct LogEntry {
    /// The address from which this log originated.
    pub address: Hex20,

    /// Array of 0 to 4 32-byte DATA elements of indexed log arguments.
    /// In solidity: The first topic is the event signature hash (e.g. Deposit(address,bytes32,uint256)),
    /// unless you declared the event with the anonymous specifier.
    pub topics: Vec<Hex32>,

    /// Contains one or more 32-byte non-indexed log arguments.
    pub data: Hex,

    /// The block number in which this log appeared.
    /// None if the block is pending.
    #[serde(rename = "blockNumber")]
    pub block_number: Option<Nat256>,

    /// 32-byte hash of the transaction from which this log was created.
    /// None if the transaction is still pending.
    #[serde(rename = "transactionHash")]
    pub transaction_hash: Option<Hex32>,

    /// Integer of the transaction's position within the block the log was created from.
    /// None if the transaction is still pending.
    #[serde(rename = "transactionIndex")]
    pub transaction_index: Option<Nat256>,

    /// 32-byte hash of the block in which this log appeared.
    /// None if the block is pending.
    #[serde(rename = "blockHash")]
    pub block_hash: Option<Hex32>,

    /// Integer of the log index position in the block.
    /// None if the log is pending.
    #[serde(rename = "logIndex")]
    pub log_index: Option<Nat256>,

    /// "true" when the log was removed due to a chain reorganization.
    /// "false" if it is a valid log.
    #[serde(default)]
    pub removed: bool,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, CandidType)]
pub struct TransactionReceipt {
    /// The hash of the block containing the transaction.
    #[serde(rename = "blockHash")]
    pub block_hash: Hex32,

    /// The number of the block containing the transaction.
    #[serde(rename = "blockNumber")]
    pub block_number: Nat256,

    /// The actual value per gas deducted from the sender's account.
    /// Before EIP-1559, this is equal to the transaction's gas price.
    /// After, it is equal to `baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas)`.
    #[serde(rename = "effectiveGasPrice")]
    pub effective_gas_price: Nat256,

    /// The amount of gas used by this specific transaction alone.
    #[serde(rename = "gasUsed")]
    pub gas_used: Nat256,

    /// Either 1 (success) or 0 (failure).
    /// Only specified for transactions included after the Byzantium upgrade.
    pub status: Option<Nat256>,

    /// The hash of the transaction
    #[serde(rename = "transactionHash")]
    pub transaction_hash: Hex32,

    /// The contract address created, if the transaction was a contract creation, otherwise `None`.
    #[serde(rename = "contractAddress")]
    pub contract_address: Option<Hex20>,

    /// The address of the sender
    pub from: Hex20,

    /// An array of log objects generated by this transaction.
    pub logs: Vec<LogEntry>,

    /// Bloom filter for light clients to quickly retrieve related logs.
    #[serde(rename = "logsBloom")]
    pub logs_bloom: Hex256,

    /// Address of the receiver or `None` in a contract creation transaction.
    pub to: Option<Hex20>,

    /// Transaction's index position in the block
    #[serde(rename = "transactionIndex")]
    pub transaction_index: Nat256,

    /// The type of the transaction:
    /// - "0x0" for legacy transactions (pre- EIP-2718)
    /// - "0x1" for access list transactions (EIP-2930)
    /// - "0x2" for EIP-1559 transactions
    #[serde(rename = "type")]
    pub tx_type: HexByte,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, CandidType)]
pub struct Block {
    /// Base fee per gas
    /// Only included for blocks after the London Upgrade / EIP-1559.
    #[serde(rename = "baseFeePerGas")]
    pub base_fee_per_gas: Option<Nat256>,

    /// Block number
    pub number: Nat256,

    /// Difficulty
    pub difficulty: Option<Nat256>,

    /// Extra data
    #[serde(rename = "extraData")]
    pub extra_data: Hex,

    /// Maximum gas allowed in this block
    #[serde(rename = "gasLimit")]
    pub gas_limit: Nat256,

    /// Gas used by all transactions in this block
    #[serde(rename = "gasUsed")]
    pub gas_used: Nat256,

    /// Block hash
    pub hash: Hex32,

    /// Bloom filter for the logs.
    #[serde(rename = "logsBloom")]
    pub logs_bloom: Hex256,

    /// Miner
    pub miner: Hex20,

    /// Mix hash
    #[serde(rename = "mixHash")]
    pub mix_hash: Hex32,

    /// Nonce
    pub nonce: Nat256,

    /// Parent block hash
    #[serde(rename = "parentHash")]
    pub parent_hash: Hex32,

    /// Receipts root
    #[serde(rename = "receiptsRoot")]
    pub receipts_root: Hex32,

    /// Ommers hash
    #[serde(rename = "sha3Uncles")]
    pub sha3_uncles: Hex32,

    /// Block size
    pub size: Nat256,

    /// State root
    #[serde(rename = "stateRoot")]
    pub state_root: Hex32,

    /// Timestamp
    #[serde(rename = "timestamp")]
    pub timestamp: Nat256,

    /// Total difficulty is the sum of all difficulty values up to and including this block.
    ///
    /// Note: this field was removed from the official JSON-RPC specification in
    /// <https://github.com/ethereum/execution-apis/pull/570> and may no longer be served by providers.
    #[serde(rename = "totalDifficulty")]
    pub total_difficulty: Option<Nat256>,

    /// Transaction hashes
    #[serde(default)]
    pub transactions: Vec<Hex32>,

    /// Transactions root
    #[serde(rename = "transactionsRoot")]
    pub transactions_root: Option<Hex32>,

    /// Uncles
    #[serde(default)]
    pub uncles: Vec<Hex32>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, CandidType)]
pub enum SendRawTransactionStatus {
    Ok(Option<Hex32>),
    InsufficientFunds,
    NonceTooLow,
    NonceTooHigh,
}
