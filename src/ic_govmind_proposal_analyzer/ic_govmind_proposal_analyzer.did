type ProposalStatus = variant {
  Pending;
  Analyzing;
  Analyzed;
  Failed;
};

type HttpHeader = record {
  name : text;
  value : text;
};

type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};

type TransformArgs = record {
  response : HttpResponse;
  context : vec nat8;
};

type ComplexityBreakdown = record {
    technical_complexity: float64;
    financial_complexity: float64;
    governance_complexity: float64;
    timeline_complexity: float64;
    explanation: text;
    comparison: text;
};

type ProposalAnalysis = record {
    summary: text;
    risk_assessment: text;
    recommendations: text;
    complexity_score: float64;
    complexity_breakdown: ComplexityBreakdown;
    estimated_impact: text;
};

type Proposal = record {
    id: text;
    title: text;
    description: text;
    submitted_by: principal;
    submitted_at: nat64;
    analysis: opt ProposalAnalysis;
    status: ProposalStatus;
};

type ProposalDraft = record {
    title: text;
    summary: text;
    rationale: text;
    specifications: text;
};

type CommitteeSuggestion = record {
    committee_id: opt nat16;
    committee_type: opt text;
    reasoning: opt text;
};

type EnhancedProposalDraft = record {
    draft: ProposalDraft;
    committee_suggestion: opt CommitteeSuggestion;
};

type DebatePersona = record {
    name: text;
    icon: text;
    core_argument: text;
    objections: vec text;
    actionable_suggestion: text;
};

type DebateSimulationResult = record {
    success: bool;
    personas: vec DebatePersona;
};

service : {
    "analyze_proposal": (text) -> (variant { Ok: ProposalAnalysis; Err: text });
    "submit_proposal_and_analyze": (opt text, text, text) -> (variant { Ok: text; Err: text });
    "draft_proposal": (text) -> (variant { Ok: ProposalDraft; Err: text });
    "draft_proposal_with_committees": (text, principal) -> (variant { Ok: EnhancedProposalDraft; Err: text });
    "run_debate_simulation": (text, text) -> (variant { Ok: DebateSimulationResult; Err: text });
    "get_proposal": (text) -> (opt Proposal) query;
    "get_all_proposals": () -> (vec Proposal) query;
    "transform_response": (TransformArgs) -> (HttpResponse) query;
}